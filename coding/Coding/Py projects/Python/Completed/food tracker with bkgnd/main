import tkinter as tk
from tkinter import ttk, messagebox
import csv
import os
from datetime import datetime
from PIL import Image, ImageTk  # New imports

class FoodTrackerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Food Item Tracker")
        
        # Load and set background image
        try:
            self.bg_image = ImageTk.PhotoImage(Image.open("E:\Py projects\food tracker with background\uwu"))  # Use your image path
g_label = tk.Label(root, image=self.bg_image)
            bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        except Exception as e:
            messagebox.showerror("Image Error", f"Failed to load background: {str(e)}")
            root.destroy()
        
        # Initialize CSV file with current week
        current_date = datetime.now()
        year, week, _ = current_date.isocalendar()
        self.csv_file = f"food_database_{year}_week_{week}.csv"
        self.init_csv()
        
        # Configure transparent styles for widgets
        self.configure_styles()
        
        self.create_widgets()
        self.calculate_budget()

    def configure_styles(self):
        # Create transparent/semi-transparent styles
        self.style = ttk.Style()
        
        # For frame backgrounds
        self.style.configure('Transparent.TFrame', background='')
        
        # For entry widgets
        self.style.configure('TEntry', background='#ffffff', fieldbackground='#ffffff')
        
        # For combobox
        self.style.configure('TCombobox', background='#ffffff')
        
        # For labels
        self.style.configure('TLabel', background='')

    def create_widgets(self):
        # Create main container frame with transparency
        main_frame = ttk.Frame(self.root, style='Transparent.TFrame')
        main_frame.pack(padx=20, pady=20, fill='both', expand=True)

        # Labels
        labels = [
            "Food Item:", "Price (MXN):", "Amount (kg):",
            "Serving Size (g):", "Calories per Serving:", "Store Purchased:"
        ]
        for idx, text in enumerate(labels):
            ttk.Label(main_frame, text=text, style='TLabel').grid(row=idx, column=0, padx=10, pady=5, sticky="w")

        # Entry fields
        self.entries = {
            "food_item": ttk.Entry(main_frame, width=30),
            "price": ttk.Entry(main_frame, width=30),
            "amount": ttk.Entry(main_frame, width=30),
            "serving_size": ttk.Entry(main_frame, width=30),
            "calories": ttk.Entry(main_frame, width=30)
        }

        # Store Combobox
        self.store_var = tk.StringVar()
        self.entries["store"] = ttk.Combobox(
            main_frame, 
            textvariable=self.store_var,
            values=["Alsuper", "Aurrera", "Walmart", "Farmers market", "Other"],
            width=27
        )

        # Grid layout for widgets
        for idx, key in enumerate(self.entries.keys()):
            self.entries[key].grid(row=idx, column=1, padx=10, pady=5)

        # Budget display
        ttk.Label(main_frame, text="Total Budget:", style='TLabel').grid(row=6, column=0, padx=10, pady=5, sticky="e")
        self.budget_var = tk.StringVar()
        ttk.Label(main_frame, textvariable=self.budget_var, style='TLabel').grid(row=6, column=1, padx=10, pady=5, sticky="w")

        # Buttons
        ttk.Button(main_frame, text="Submit", command=self.save_entry).grid(row=7, column=0, padx=10, pady=10)
        ttk.Button(main_frame, text="Clear", command=self.clear_fields).grid(row=7, column=1, padx=10, pady=10)
        ttk.Button(main_frame, text="New Week", command=self.new_week).grid(row=7, column=2, padx=10, pady=10)

    # Rest of your original methods remain unchanged...
    # (init_csv, save_entry, clear_fields, calculate_budget, new_week)

if __name__ == "__main__":
    root = tk.Tk()
    root.geometry("800x600")  # Set appropriate window size for your background
    app = FoodTrackerApp(root)
    root.mainloop()